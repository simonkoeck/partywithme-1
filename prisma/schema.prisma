// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserLoginType {
  EMAIL
  GOOGLE
}

model PasswordReset {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id     String
  token       String    @db.VarChar(64)
  expiration  DateTime  @default(now())
  created_at  DateTime      @default(now())
}

model User {
  id                      String        @id @default(cuid())
  username                String        @db.VarChar(20) @unique
  email                   String        @db.VarChar(320) @unique
  password                String?       @db.VarChar(72)
  onesignal_external_user_id  String    @db.VarChar(128)
  login_type              UserLoginType @default(EMAIL)
  google_id               String?       @unique
  locale                  String        @db.VarChar(5)  @default("en_US")
  verified                Boolean       @default(false)
  verification_token      String?       @db.VarChar(32) @unique
  password_resets         PasswordReset[]
  parties                 Party[]
  participations          PartyParticipation[]
  outgoing_friendrequests FriendRequest[] @relation(name: "FriendRequest_outgoing")
  incoming_friendrequests FriendRequest[] @relation(name: "FriendRequest_incoming")
  friends                 Friendship[]  @relation(name: "Friendship_user")
  friends_friend          Friendship[]  @relation(name: "Friendship_friend")
  read_confirmations      ChatMessageReadConfirmation[]
  messages                ChatMessage[]
  conversation_mutes      ConversationMute[]
  bans                    Ban[]
  reported                Report[] @relation(name: "Report_reported_by")
  reports                 Report[] @relation(name: "Report_user")
  created_at              DateTime      @default(now())
  updated_at              DateTime      @updatedAt @default(now())
}

// Friends
model FriendRequest {
  id        String  @id @default(cuid())
  from      User    @relation(fields: [from_id], references: [id], name: "FriendRequest_outgoing", onDelete: Cascade)
  from_id   String 
  to        User    @relation(fields: [to_id], references: [id], name: "FriendRequest_incoming", onDelete: Cascade)
  to_id     String     
  @@unique([from_id, to_id], name: "UQ_FriendRequest")
}

model Friendship {
  id            String  @id @default(cuid())
  user          User    @relation(fields: [user_id], references: [id], name: "Friendship_user", onDelete: Cascade)
  user_id       String 
  friend        User    @relation(fields: [friend_id], references: [id], name: "Friendship_friend", onDelete: Cascade)
  friend_id     String     
  conversation  Conversation[]
  @@unique([user_id, friend_id], name: "UQ_Friendship")
}

// Party

enum PartyScope {
  PUBLIC
  FRIENDS
  WHITELIST
}

model Party {
  id              String      @id @default(cuid())
  name            String      @db.VarChar(32)
  description     String      @db.VarChar(500)
  scope           PartyScope
  starts_at       DateTime
  ends_at         DateTime
  creator         User        @relation(references: [id], fields: [creator_id], onDelete: Cascade)
  creator_id      String
  participations  PartyParticipation[]
  conversation    Conversation[]
  latitude        Decimal     @db.Decimal(10, 8)
  longitude       Decimal     @db.Decimal(11, 8)
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt @default(now())
}


model PartyParticipation {
  id        String  @id @default(cuid())
  user      User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id   String 
  party     Party   @relation(fields: [party_id], references: [id], onDelete: Cascade)
  party_id  String       
  @@unique([user_id, party_id], name: "UQ_PartyParticipation")
}

// Chat

model Conversation {
  id            String  @id @default(cuid())
  friendship    Friendship?  @relation(fields: [friendship_id], references: [id], onDelete: Cascade) 
  friendship_id String? @unique
  party         Party?  @relation(fields: [party_id], references: [id], onDelete: Cascade)
  party_id      String? @unique
  mutes         ConversationMute[]
  messages      ChatMessage[]
}

enum ChatMessageType {
  TEXT
  IMAGE
}

model ChatMessage {
  id                  String          @id @default(cuid())
  conversation        Conversation    @relation(fields: [conversation_id], references: [id], onDelete: Cascade)
  conversation_id     String
  type                ChatMessageType @default(TEXT)
  content             String          @db.VarChar(1000)
  sender              User            @relation(fields: [sender_id], references: [id], onDelete: Cascade)
  sender_id           String
  read_confirmations  ChatMessageReadConfirmation[]
  reply_to            ChatMessage?    @relation(fields: [reply_to_id], references: [id], onDelete: SetNull, name: "ChatMessage_reply")
  reply_to_id         String?
  replies             ChatMessage[]   @relation(name: "ChatMessage_reply")
  created_at          DateTime        @default(now())
  updated_at          DateTime        @updatedAt @default(now())
}

model ChatMessageReadConfirmation {
  id              String          @id @default(cuid())
  user            User            @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id         String
  message         ChatMessage     @relation(fields: [message_id], references: [id], onDelete: Cascade)
  message_id      String
  created_at      DateTime        @default(now())
  @@unique([user_id, message_id], name: "UQ_ChatMessageReadConfirmation")
}

model ConversationMute {
  id              String          @id @default(cuid())
  user            User            @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id         String
  conversation    Conversation    @relation(fields: [conversation_id], references: [id], onDelete: Cascade)
  conversation_id String
  created_at      DateTime        @default(now())
  @@unique([user_id, conversation_id], name: "UQ_ConversationMute")
}

// Report and Bans
enum ReportAndBanReason {
  SPAM
  HARASSMENT
  VIOLENCE
  ADVERTISING
  IDENTITY_THEFT
  INAPPROPRIATE_USERNAME
  OTHER
}

model Report {
  id        String  @id @default(cuid())
  user      User    @relation(fields: [user_id], references: [id], onDelete: Cascade, name: "Report_user")
  user_id   String
  reason    ReportAndBanReason
  bans      Ban[]
  reported_by User    @relation(fields: [reported_by_id], references: [id], onDelete: Cascade, name: "Report_reported_by")
  reported_by_id   String
  additional_info String?
  reviewed  Boolean @default(false)
  created_at DateTime @default(now())
  
  @@unique([user_id, reported_by_id, reason], name: "UQ_Report")
}

enum BanRestriction {
  NO_CHAT
  NO_ACCESS
}

model Ban {
  id        String  @id @default(cuid())
  user      User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id   String
  reason    ReportAndBanReason
  restriction BanRestriction
  report    Report? @relation(fields: [report_id], references: [id], onDelete: SetNull)
  report_id String?
  duration  Int
  lifetime  Boolean @default(false)
  additional_info String?
  created_at DateTime @default(now())
}