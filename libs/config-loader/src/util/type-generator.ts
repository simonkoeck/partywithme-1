import { readdir, writeFileSync, readFileSync } from 'fs';

// eslint-disable-next-line @typescript-eslint/no-var-requires
const beautify = require('js-beautify').js;

console.log('[+] Reading config files...');

readdir('conf/', (err, files) => {
  files.forEach((file) => {
    const namespace = file.split('.')[0];
    const content = JSON.parse(readFileSync('conf/' + file, 'utf8'));

    console.log('[+] Generating ' + namespace + '.d.ts');

    let ts = `/** File generated by config-loader type generator - DO NOT MODIFY */\n
export interface ${namespace} {\n`;

    function r(o: unknown, i: number): string {
      let text = '';
      Object.keys(o).forEach((key) => {
        if (typeof o[key] === 'string') {
          text += `  ${key}: string;\n`;
        } else if (typeof o[key] === 'number') {
          text += `  ${key}: number;\n`;
        } else if (typeof o[key] === 'boolean') {
          text += `  ${key}: boolean;\n`;
        } else if (typeof o[key] === 'object') {
          text += `  ${key}: {\n`;
          text += r(o[key], i + 1);
          text += `\t};\n`;
        }
      });
      return text;
    }
    ts += r(content, 1);
    ts += `}\n`;

    writeFileSync(
      'libs/config-loader/src/lib/interfaces/' + namespace + '.d.ts',
      beautify(ts)
    );
  });

  const namespaces = files.map((file) => file.split('.')[0]);
  let ts = `/** File generated by config-loader type generator - DO NOT MODIFY */\n`;
  ts += `
${namespaces
  .map(
    (namespace) => `import { ${namespace} } from "./interfaces/${namespace}";`
  )
  .join('\n  ')}

export interface IConfigData {
  ${namespaces.map((namespace) => `${namespace}: ${namespace};`).join('\n  ')}
};\n`;
  writeFileSync('libs/config-loader/src/lib/interfaces.ts', beautify(ts));

  console.log('[+] Successfully generated config-loader type definitions!');
});
